// generated by Fast Light User Interface Designer (fluid) version 1.0009

#include "CMakeSetupGUI.h"

inline void CMakeSetupGUI::cb_dialogWindow_i(Fl_Window*, void*) {
  recentSourceDirectoriesBrowser->hide();
recentBinaryDirectoriesBrowser->hide();
}
void CMakeSetupGUI::cb_dialogWindow(Fl_Window* o, void* v) {
  ((CMakeSetupGUI*)(o->user_data()))->cb_dialogWindow_i(o,v);
}

inline void CMakeSetupGUI::cb_sourcePathTextInput_i(Fl_Input*, void*) {
  SetSourcePath( sourcePathTextInput->value() );
}
void CMakeSetupGUI::cb_sourcePathTextInput(Fl_Input* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_sourcePathTextInput_i(o,v);
}

inline void CMakeSetupGUI::cb_Browse_i(Fl_Button*, void*) {
  BrowseForSourcePath();
}
void CMakeSetupGUI::cb_Browse(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_Browse_i(o,v);
}

inline void CMakeSetupGUI::cb_binaryPathTextInput_i(Fl_Input*, void*) {
  SetBinaryPath( binaryPathTextInput->value() );
}
void CMakeSetupGUI::cb_binaryPathTextInput(Fl_Input* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_binaryPathTextInput_i(o,v);
}

inline void CMakeSetupGUI::cb_Browse1_i(Fl_Button*, void*) {
  BrowseForBinaryPath();
}
void CMakeSetupGUI::cb_Browse1(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_Browse1_i(o,v);
}

inline void CMakeSetupGUI::cb_m_CancelButton_i(Fl_Button*, void*) {
  ClickOnCancel();
}
void CMakeSetupGUI::cb_m_CancelButton(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_m_CancelButton_i(o,v);
}

inline void CMakeSetupGUI::cb_m_ConfigureButton_i(Fl_Button*, void*) {
  ClickOnConfigure();
}
void CMakeSetupGUI::cb_m_ConfigureButton(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_m_ConfigureButton_i(o,v);
}

inline void CMakeSetupGUI::cb_2_i(Fl_Button*, void*) {
  ShowRecentSourceDirectories();
}
void CMakeSetupGUI::cb_2(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_2_i(o,v);
}

inline void CMakeSetupGUI::cb_21_i(Fl_Button*, void*) {
  ShowRecentBinaryDirectories();
}
void CMakeSetupGUI::cb_21(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_21_i(o,v);
}

inline void CMakeSetupGUI::cb_recentSourceDirectoriesBrowser_i(Fl_Browser*, void*) {
  SelectOneRecentSourceDirectory();
}
void CMakeSetupGUI::cb_recentSourceDirectoriesBrowser(Fl_Browser* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_recentSourceDirectoriesBrowser_i(o,v);
}

inline void CMakeSetupGUI::cb_recentBinaryDirectoriesBrowser_i(Fl_Browser*, void*) {
  SelectOneRecentBinaryDirectory();
}
void CMakeSetupGUI::cb_recentBinaryDirectoriesBrowser(Fl_Browser* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_recentBinaryDirectoriesBrowser_i(o,v);
}

inline void CMakeSetupGUI::cb_m_OKButton_i(Fl_Button*, void*) {
  ClickOnOK();
}
void CMakeSetupGUI::cb_m_OKButton(Fl_Button* o, void* v) {
  ((CMakeSetupGUI*)(o->parent()->user_data()))->cb_m_OKButton_i(o,v);
}

CMakeSetupGUI::CMakeSetupGUI() {
  { Fl_Window* w;
  Fl_Window* o = dialogWindow = new Fl_Window(562, 373, "CMakeSetupDialog");
    w = o;
    o->callback((Fl_Callback*)cb_dialogWindow, (void*)(this));
    { Fl_Input* o = sourcePathTextInput = new Fl_Input(219, 15, 200, 20, "Where is the source code: ");
      o->labelsize(11);
      o->textsize(11);
      o->callback((Fl_Callback*)cb_sourcePathTextInput);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Button* o = new Fl_Button(453, 14, 65, 22, "Browse...");
      o->shortcut(0x80073);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Browse);
    }
    { Fl_Input* o = binaryPathTextInput = new Fl_Input(219, 50, 200, 20, "Where do you want to build the binaries: ");
      o->labelsize(11);
      o->textsize(11);
      o->callback((Fl_Callback*)cb_binaryPathTextInput);
      o->when(FL_WHEN_ENTER_KEY);
    }
    { Fl_Button* o = new Fl_Button(453, 49, 65, 22, "Browse...");
      o->shortcut(0x80062);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Browse1);
    }
    { Fl_Button* o = m_CancelButton = new Fl_Button(390, 332, 100, 23, "Cancel");
      o->shortcut(0x80071);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_m_CancelButton);
    }
    { Fl_Button* o = m_ConfigureButton = new Fl_Button(105, 332, 100, 23, "Configure");
      o->shortcut(0x8006d);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_m_ConfigureButton);
    }
    { Fl_Group* o = new Fl_Group(25, 80, 515, 222);
      o->box(FL_ENGRAVED_BOX);
      o->labelsize(11);
      o->align(FL_ALIGN_CENTER);
      { Fl_Scroll* o = cacheValuesScroll = new Fl_Scroll(40, 98, 485, 190, "Cache Values");
        o->type(7);
        o->box(FL_DOWN_FRAME);
        o->labelsize(11);
        o->align(FL_ALIGN_TOP_LEFT);
        o->when(FL_WHEN_CHANGED);
        { Fl_Pack* o = propertyListPack = new Fl_Pack(40, 99, 485, 185);
          o->end();
          Fl_Group::current()->resizable(o);
        }
        o->end();
        Fl_Group::current()->resizable(o);
      }
      o->end();
      Fl_Group::current()->resizable(o);
    }
    { Fl_Box* o = new Fl_Box(160, 305, 275, 25, "Right click on cache entries for additional options");
      o->labelsize(11);
    }
    { Fl_Button* o = new Fl_Button(420, 15, 22, 21, "@#2>");
      o->labeltype(FL_SYMBOL_LABEL);
      o->callback((Fl_Callback*)cb_2);
    }
    { Fl_Button* o = new Fl_Button(420, 50, 22, 21, "@#2>");
      o->labeltype(FL_SYMBOL_LABEL);
      o->callback((Fl_Callback*)cb_21);
    }
    { Fl_Browser* o = recentSourceDirectoriesBrowser = new Fl_Browser(15, 35, 535, 115);
      o->type(2);
      o->box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_recentSourceDirectoriesBrowser);
      o->hide();
    }
    { Fl_Browser* o = recentBinaryDirectoriesBrowser = new Fl_Browser(15, 70, 535, 115);
      o->type(2);
      o->box(FL_BORDER_BOX);
      o->callback((Fl_Callback*)cb_recentBinaryDirectoriesBrowser);
      o->hide();
    }
    { Fl_Button* o = m_OKButton = new Fl_Button(250, 332, 100, 23, "OK");
      o->shortcut(0x8006d);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_m_OKButton);
    }
    o->end();
  }
}

CMakeSetupGUI::~CMakeSetupGUI() {
}

void CMakeSetupGUI::Close(void) {
}

void CMakeSetupGUI::BrowseForSourcePath(void) {
}

void CMakeSetupGUI::BrowseForBinaryPath(void) {
}

void CMakeSetupGUI::Show(void) {
}

bool CMakeSetupGUI::SetBinaryPath(const char *) {
  return false;
}

bool CMakeSetupGUI::SetSourcePath(const char *) {
  return false;
}

void CMakeSetupGUI::ShowRecentBinaryDirectories(void) {
}

void CMakeSetupGUI::ShowRecentSourceDirectories(void) {
}

void CMakeSetupGUI::SelectOneRecentBinaryDirectory(void) {
}

void CMakeSetupGUI::SelectOneRecentSourceDirectory(void) {
}

void CMakeSetupGUI::ClickOnConfigure(void) {
}

void CMakeSetupGUI::ClickOnOK(void) {
}

void CMakeSetupGUI::ClickOnCancel(void) {
}
